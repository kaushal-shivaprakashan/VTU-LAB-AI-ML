
h = {
        'A': 10,
        'B': 8,
        'C': 5,
        'D': 7,
        'E': 3,
        'F': 6,
        'G': 5,
        'H': 3,
        'I': 1,
        'J': 0
    }

graph = {
    
    'A': [('B', 6), ('F', 3)],
    'B': [('C', 3), ('D', 2)],
    'C': [('D', 1), ('E', 5)],
    'D': [('C', 1), ('E', 8)],
    'E': [('I', 5), ('J', 5)],
    'F': [('G', 1),('H', 7)] ,
    'G': [('I', 3)],
    'H': [('I', 2)],
    'I': [('E', 5), ('J', 3)],
}

start = 'A'
stop = 'J'

open_set = set(start) 
closed_set = set()

g = {}
g[start] = 0

parents = {}
parents[start] = start


while len(open_set) > 0:
    n = None

    for v in open_set:
        if n == None or g[v] + h[v] < g[n] + h[n]:
            n = v

    if n == None:
        print('Path does not exist!')
        break

    
    if n == stop:
        path = []

        while parents[n] != n:
            path.append(n)
            n = parents[n]

        path.append(start)

        path.reverse()

        print('Path found: {}'.format(path))
        break
    
    for (m, weight) in graph[n]:
       
        if m not in open_set and m not in closed_set:
            open_set.add(m)
            parents[m] = n
            g[m] = g[n] + weight


       
        else:
            if g[m] > g[n] + weight:
                
                g[m] = g[n] + weight
                
                parents[m] = n

                
                if m in closed_set:
                    closed_set.remove(m)
                    open_set.add(m)
    
    open_set.remove(n)
    closed_set.add(n)